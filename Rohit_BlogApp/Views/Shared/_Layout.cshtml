@{
    var username = Context.Session.GetString("Username") ?? "Guest";
    var email = Context.Session.GetString("Email") ?? "guest@example.com";
    // var profileUrl = Context.Session.GetString("ProfileUrl");
}




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Journey</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body class="bg-gray-100 mx-auto">
    <div class="flex h-screen relative">
        <!-- Mobile Header -->
        <div class="xl:hidden fixed top-0 w-full bg-white shadow-md flex justify-between items-center p-4 z-10">
            <button id="menuButton" class="text-gray-700 text-2xl">&#9776;</button>
            <img src="/Img/logo-white.png" alt="logo" class="w-1/3" />
            <button id="notificationButton" class="text-gray-700 text-2xl relative">
                &#128276;
                <span id="notificationCount" class="bg-red-500 text-white text-xs rounded-full px-2 absolute top-0 right-0 hidden"></span>
            </button>
        </div>

        <!-- Sidebar -->
        <aside id="sidebar" class="w-1/2 z-[10] xl:w-[20%] bg-white border-r shadow-md p-4 mt-[70px] lg:mt-0 fixed h-full flex-col transform -translate-x-full transition-transform duration-300 ease-in-out xl:translate-x-0">

            <!-- Logo -->
            <img src="/Img/logo-white.png" class="text-2xl font-bold text-center mb-3 rounded-sm " />

          @* @if(@Model.ProfileUrl!=null) *@
          @* { *@
          @*       <div class="w-[100%]  h-[190px] p-2 bg-gray-300 overflow-hidden"> *@
          @*           <img src="@profileUrl" class="block mx-auto h-full rounded-md  w-full p-1  " alt="profile" /> *@
          @*       </div> *@
          @* }else{ *@
          @*       <div class="w-[100%]  h-[190px] p-2 bg-gray-300 overflow-hidden"> *@
          @*           <img src="/Img/profile-icon.jpg" class="block mx-auto h-full rounded-md  w-full p-1  " alt="profile" /> *@
          @*       </div> *@
          @* } *@
           
            <!-- User Info -->
            <div class="mb-6">
                <p class="text-xl font-semibold"> <a href="/Profile/Index"> @username</a></p>
                <p class="text-sm text-gray-500">@email</p>
            </div>

            <!-- Search Bar -->
            <form asp-controller="Home" asp-action="Search" method="get" class="mb-6">
                <div class="relative">
                    <input type="text" name="username" placeholder="Search User..." required
                           class="w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" />
                    <button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-blue-500">
                        🔍
                    </button>
                </div>
            </form>

            <!-- Navigation Links -->
            <ul class="space-y-4 flex-grow">
                <li><a href="/Home/Index" class="block text-lg text-gray-700 hover:text-blue-500">Posts <hr class="mt-1" /></a></li>
                
                <li><a href="/Profile/Index/" class="block text-lg text-gray-700 hover:text-blue-500">Profile <hr class="mt-1" /></a></li>
                
                <li><a asp-controller="Post" asp-action="Create" class="block text-lg text-gray-700 hover:text-blue-500">Create Post <hr class="mt-1" /></a></li>
               
            </ul>
            @* <hr class="mt-1" /> *@
            <!-- Logout Button -->
            <div class="flex-end item-end">
                <form asp-controller="Home" asp-action="Logout">
                    <button type="submit" class="block w-full text-lg bg-gray-200 p-2 rounded-sm text-red-500 hover:text-red-700">
                        Logout
                    </button>
                </form>
            </div>
            <hr  class="mt-1"/>
        </aside>


        <!-- Main Content -->
        <main role="main" class="pb-3 mx-auto w-full xl:w-[60%] px-4 mt-16 md:mt-0 relative h-auto">
            @RenderBody()
        </main>
        <div id="notificationContainer"></div>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            $(document).ready(function () {
                $("#notificationContainer").load("/Post/GetNotifications");
            });
        </script>


    </div>

	<script src="~/js/site.js"></script>


    <script>



        document.addEventListener("DOMContentLoaded", function () {
            // Check all posts' content
            const posts = document.querySelectorAll('[id^="post-content-"]');
            posts.forEach(post => {
                // If content overflows, show "View More" button
                if (post.scrollHeight > post.clientHeight) {
                    const postId = post.getAttribute('id').split('-')[2];
                    const viewMoreBtn = document.getElementById('view-more-' + postId);
                    if (viewMoreBtn) {
                        viewMoreBtn.style.display = 'inline';
                    }
                }
            });
        });

        function likePost(title) {
            fetch(`/Post/Like?title=${encodeURIComponent(title)}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                // Update the like count on the page
                document.getElementById('like-count').innerText = data.likes;
            })
            .catch(error => console.error('Error:', error));
        }




        function toggleContent(postId) {
            const content = document.getElementById('post-content-' + postId);
            const button = document.getElementById('view-more-' + postId);

            if (content.classList.contains('line-clamp-3')) {
                content.classList.remove('line-clamp-3', 'max-h-20', 'overflow-hidden');
                button.textContent = 'View Less';
            } else {
                content.classList.add('line-clamp-3', 'max-h-20', 'overflow-hidden');
                button.textContent = 'View More';
            }
        }


    </script>

    <script>
                const menuButton = document.getElementById('menuButton');
        const notificationButton = document.getElementById('notificationButton');
        const sidebar = document.getElementById('sidebar');
        const notifications = document.getElementById('notifications');
        const notificationCount = document.getElementById('notificationCount');
        const notificationList = document.getElementById('notificationList');

        // Toggle Sidebar
        menuButton?.addEventListener('click', () => {
            sidebar.classList.toggle('-translate-x-full');
            notifications.classList.add('translate-x-full');
        });

        // Toggle Notifications
        notificationButton?.addEventListener('click', () => {
            notifications.classList.toggle('translate-x-full');
            sidebar.classList.add('-translate-x-full');
        });


        // Close on Outside Click
        document.addEventListener('click', (e) => {
            if (!sidebar.contains(e.target) && !menuButton.contains(e.target) && window.innerWidth < 768) {
                sidebar.classList.add('hidden');
            }
            if (!notifications.contains(e.target) && !notificationButton.contains(e.target) && window.innerWidth < 768) {
                notifications.classList.add('hidden');
            }
        });

        // Dynamic Notification Loading (Example)
        function loadNotifications() {
            fetch('/Notification/GetNotifications')
                .then(response => response.json())
                .then(data => {
                    notificationList.innerHTML = '';
                    if (data.length > 0) {
                        notificationCount.textContent = data.length;
                        notificationCount.classList.remove('hidden');
                        data.forEach(notification => {
                            const p = document.createElement('p');
                            p.classList.add('text-sm', 'text-gray-700');
                            p.textContent = notification.message;
                            notificationList.appendChild(p);
                        });
                    } else {
                        notificationCount.classList.add('hidden');
                        const noNotification = document.createElement('p');
                        noNotification.classList.add('text-sm', 'text-gray-700');
                        noNotification.textContent = 'No new notifications';
                        notificationList.appendChild(noNotification);
                    }
                });
        }

        function likePost(postId) {
            fetch('/Post/Like?postId=' + postId, {
                method: 'POST'
            })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('like-count-' + postId).innerText = data.likes;
                })
                .catch(error => console.error('Error:', error));
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadNotifications();
            setInterval(loadNotifications, 10000);
        });




    </script>
    @RenderSection("Scripts", required: false)

</body>
</html>
